{% include "timesheets/header.html" %}
<body>

    <h2>Login</h2>
    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}
    <form method="post">
        {% csrf_token %}
        <label for="username">Username:</label>
        <input type="text" name="username" id="username">
        <label for="password">Password:</label>
        <input type="password" name="password" id="password">
        <button type="submit">Login</button>
    </form>



</body>
</html>


header color:
 background-color: #031c3d;


sites.html
{% include "timesheets/header.html" %}
{% include "timesheets/sidebar.html" %}
<style>
  .top-right-image {

            top: -20px; /* Adjust to move image down */
            right: 3px; /* Adjust to move image right */
            width: 35px; /* Adjust as needed */
            height: auto; /* Maintain aspect ratio */
        }
</style>
<body>
<div>
<section style=" padding: 60px ;" >
              <h4></h4>
        <div class="tittle wow fadeInUp text-center" style="visibility: visible; animation-name: fadeInUp;">
                        <h1>
   Sites
                        </h1>

                    </div>
            </section>


<div class="container">
  <div class="row justify-content-center" >
       <div class="row justify-content-center">
      <a href="{% url 'add_site' %}">
<button class="btn btn-sm btn-outline-primary float-end"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
  <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
</svg></button>
    </a>
      </div>

    <div class="row justify-content-between ">



    <div class="col-md-4 mb-4">
{% for site in sites %}
      <div class="card d-flex " style="width: 18rem; height: 10rem">
  <div class="card-body">

      <a href="{% url 'view_site' site.site_id %}" style="text-decoration:none;">
           <img src="https://cdn.creazilla.com/cliparts/3152831/building-clipart-md.png" class="top-right-image" >
    <h5 class="card-title">{{ site }}</h5>
    <h6 class="card-subtitle mb-2 text-body-secondary">{{ site.site_address }}</h6>
    <p class="card-text "></p>
    </a>

  </div>


      </div>

</div>
         {% endfor %}
      <div class="p-4 p-md-5 mb-4 rounded text-body-emphasis ">
    <div class="col-lg-6 px-0">
      <h1 class="display-4 fst-italic"></h1>
      <p class="lead my-3"></p>
      <p class="lead mb-0"><a href="#" class="text-body-emphasis fw-bold"></a></p>
    </div>
  </div>
        </div>




</body>

    def ready(self):
        from .models import Tenant
        tenants = Tenant.objects.all()
        for tenant in tenants:
            alias = tenant.db_alias
            if not all([tenant.db_host, tenant.db_name, tenant.db_user, tenant.db_password]):
                logger.warning(f"Tenant '{tenant.name}' DB config is incomplete. Skipping registration.")
                continue

            if alias not in settings.DATABASES:
                config = {
                    "ENGINE": "django.db.backends.postgresql",
                    "HOST": tenant.db_host,
                    "NAME": tenant.db_name,
                    "USER": tenant.db_user,
                    "PASSWORD": tenant.db_password,
                    "PORT": "5432",
                    "ATOMIC_REQUESTS": False,  # <-- must have this
                    "OPTIONS": {
                        "sslmode": "require"
                    },
                }
                settings.DATABASES[alias] = config
                connections.databases[alias] = config
                logger.info(f"Registered tenant DB '{tenant.name}' with alias '{alias}'")

    def allow_migrate(self, db, app_label, model_name=None, **hints):
        core_apps = ["auth", "admin", "sessions", "contenttypes"]
        tenant_apps = ["timesheets"]

        # ✅ control_panel always migrates on default
        if db == "default":
            return app_label in core_apps + ["control_panel"]

        # Tenant DBs get core apps + tenant apps
        if db and db.startswith("tenant_"):
            return app_label in core_apps + tenant_apps

        return False

db_manager (26 Aug the one that works):
# db_manager.py
from django.conf import settings
from django.db import connections, DEFAULT_DB_ALIAS
from django.core.management import call_command
import threading
import pytz
from django.utils import timezone
import logging
from django.db.migrations.executor import MigrationExecutor
from django.db.migrations.recorder import MigrationRecorder

logger = logging.getLogger(__name__)

# Thread-local storage for current tenant
THREAD_LOCAL = threading.local()


def set_current_tenant(tenant):
    """
    Store the current tenant object in thread-local storage.
    Can be accessed later in forms/views without re-querying.
    """
    THREAD_LOCAL.tenant = tenant
    THREAD_LOCAL.tenant_alias = getattr(tenant, "db_alias", None)


def get_current_tenant(default=None, allow_default_for_admin=True):
    """
    Retrieve the current tenant object from thread-local storage.

    - For tenant users: must return a Tenant object, never silently fall back.
    - For platform admins: may fall back to default DB (if allowed).
    """
    tenant = getattr(THREAD_LOCAL, "tenant", None)

    if tenant:
        return tenant

    if allow_default_for_admin:
        # 👇 Middleware should set admin context if needed
        return default

    raise RuntimeError(
        "No tenant is set for this request. "
        "Did you forget to set request.session['tenant_alias'] "
        "or run inside TenantMiddleware?"
    )


def get_current_tenant_alias(default=None):
    """
    Retrieve just the current tenant DB alias.
    """
    return getattr(THREAD_LOCAL, "tenant_alias", default)


def clear_current_tenant():
    """
    Clears tenant info (best practice at end of each request).
    """
    if hasattr(THREAD_LOCAL, "tenant"):
        del THREAD_LOCAL.tenant
    if hasattr(THREAD_LOCAL, "tenant_alias"):
        del THREAD_LOCAL.tenant_alias


def build_tenant_config(tenant):
    """
    Build database config dict for the given tenant.
    """
    config = settings.DB_DEFAULTS.copy()

    tenant_config = {
        "ENGINE": getattr(tenant, "db_engine", "django.db.backends.postgresql"),
        "NAME": getattr(tenant, "db_name", settings.DATABASES["default"]["NAME"]),
        "USER": getattr(tenant, "db_user", settings.DATABASES["default"]["USER"]),
        "PASSWORD": getattr(tenant, "db_password", settings.DATABASES["default"]["PASSWORD"]),
        "HOST": getattr(tenant, "db_host", settings.DATABASES["default"]["HOST"]),
        "PORT": getattr(tenant, "db_port", settings.DATABASES["default"]["PORT"]),
        "ATOMIC_REQUESTS": True,
        "TIME_ZONE": getattr(tenant, "time_zone", settings.TIME_ZONE) or settings.TIME_ZONE,
    }

    db_options = getattr(tenant, "db_options", None)
    tenant_config["OPTIONS"] = db_options if isinstance(db_options, dict) else {"sslmode": "require"}

    config.update(tenant_config)

    # 🔹 Debug prints
    print("\n[DEBUG] build_tenant_config called")
    print("Tenant alias: ", getattr(tenant, "db_alias", "UNKNOWN"))
    print("Tenant DB config:")
    for k, v in config.items():
        if k == "PASSWORD":
            v = "********"
        print(f"  {k}: {v}")
    print()

    return config


def register_tenant_db(tenant, migrate=False):
    """
    Register a tenant database and optionally run migrations.
    """
    alias = tenant.db_alias.strip()
    set_current_tenant(tenant)

    config = build_tenant_config(tenant)

    # Ensure TIME_ZONE exists
    if "TIME_ZONE" not in config or not config["TIME_ZONE"]:
        config["TIME_ZONE"] = getattr(settings, "TIME_ZONE", "UTC")
        print(f"[DEBUG] TIME_ZONE missing, defaulting to {config['TIME_ZONE']}")

    # Register tenant DB
    settings.DATABASES[alias] = config

    # Handle old connections
    if alias in connections:
        if migrate:
            print(f"[DEBUG] Closing old connection for alias '{alias}' (migration mode)")
            try:
                connections[alias].close()
            except Exception as e:
                print(f"[WARN] Could not close old connection for {alias}: {e}")
        else:
            print(f"[DEBUG] Deleting old connection for alias '{alias}' (login mode)")
            del connections[alias]

    # Ensure connection
    conn = connections[alias]
    conn.ensure_connection()

    print(f"[DEBUG] Connected to tenant DB: {alias}")
    for key, value in conn.settings_dict.items():
        print(f"  {key}: {value}")

    # 🔹 Run migrations if requested
    if migrate:
        print(f"[DEBUG] Running ordered migrations on tenant DB alias='{alias}'")

        # 1. Core apps
        call_command("migrate", "contenttypes", database=alias, interactive=False, verbosity=1)
        call_command("migrate", "auth", database=alias, interactive=False, verbosity=1)

        # 2. Your apps
        call_command("migrate", "control_panel", database=alias, interactive=False, verbosity=1)
        call_command("migrate", "timesheets", database=alias, interactive=False, verbosity=1)

        # 3. Built-in extras
        call_command("migrate", "admin", database=alias, interactive=False, verbosity=1)
        call_command("migrate", "sessions", database=alias, interactive=False, verbosity=1)

        # 4. Catch-all
        call_command("migrate", database=alias, interactive=False, verbosity=1)

        print(f"[DEBUG] ✅ Ordered migrations finished successfully for tenant '{alias}'")


def activate_tenant_timezone(tenant):
    """
    Activate tenant-specific timezone.
    """
    tz = pytz.timezone(getattr(tenant, "time_zone", settings.TIME_ZONE))
    timezone.activate(tz)


def run_dynamic_migrations(db_config: dict):
    """
    Run migrations on a DB config without adding it to settings.DATABASES permanently.
    """
    alias = "dynamic_tenant"

    # Ensure TIME_ZONE is set
    if "TIME_ZONE" not in db_config or not db_config["TIME_ZONE"]:
        db_config["TIME_ZONE"] = getattr(settings, "TIME_ZONE", "UTC")
        print(f"[DEBUG] TIME_ZONE missing, defaulting to {db_config['TIME_ZONE']}")

    # Register temporary connection
    connections.databases[alias] = db_config
    print(f"[DEBUG] Registered temporary DB '{alias}' for migrations")

    try:
        conn = connections[alias]
        conn.ensure_connection()
        print(f"[DEBUG] Connection ensured for {alias} (Connected: {conn.is_usable()})")

        # Ensure migrations table exists
        recorder = MigrationRecorder(conn)
        recorder.ensure_schema()
        print("[DEBUG] MigrationRecorder schema ensured")

        # Load migrations
        executor = MigrationExecutor(conn)
        all_migrations = executor.loader.graph.leaf_nodes()
        print(f"[DEBUG] Migration targets (leaf nodes): {all_migrations}")

        # Apply migrations
        executor.migrate(all_migrations)
        print(f"[DEBUG] ✅ Migrations applied on DB {db_config['NAME']}")

        # Show applied migrations
        applied = recorder.applied_migrations()
        print(f"[DEBUG] Applied migrations ({len(applied)}): {applied}")

    finally:
        # Clean up
        del connections[alias]
        print(f"[DEBUG] Connection '{alias}' removed from connections")


name="Tenant A",
                db_alias="tenant_a",
                db_host="ep-icy-haze-adb6wkqg-pooler.c-2.us-east-1.aws.neon.tech",
                db_name="neondb",
                db_user="neondb_owner",
                db_password="npg_cPluZkjR8It4",


name="Tenant B",
                db_alias="tenant_b",
                db_host="ep-muddy-haze-a8gy8e1w-pooler.eastus2.azure.neon.tech",
                db_name="neondb",
                db_user="neondb_owner",
                db_password="npg_mi3KvJC7rzuy",


name="Tenant C",
                db_alias="tenant_b",
                db_host="ep-icy-waterfall-a8dnh2jk-pooler.eastus2.azure.neon.tech",
                db_name="neondb",
                db_user="neondb_owner",
                db_password="npg_XiDKZd4Ys0yk",

curl -X POST https://espanini.onrender.com/api/webhook/attendance/ \
-H "Content-Type: application/json" \
-d '{
  "macAddress": "04:03:12:1d:e6:66",
  "dateTime": "2025-10-09T08:30:00Z",
  "AccessControllerEvent": {
    "attendanceStatus": "CheckIn",
    "employeeNoString": "1234"
  }
}'




"{% for employee in employees %}

								<tr class="row100 body">
									<td class="cell100 column1">{{ employee.employee_id }}</td>
									<td class="cell100 column2">{{ employee.first_name }}</td>
									<td class="cell100 column3">{{ employee.last_name }}</td>
									<td class="cell100 column4">{{ employee.site }}</td>

                                          <td class="cell100 column5">
          {% if employee.connected %}
            <span class="text-success">🟢</span>
          {% else %}
            <span class="text-danger">❌</span>
          {% endif %}
        </td>
								</tr>

      {% endfor %}"

" <!-- Already Signed Off Section -->
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-4 mb-4">
                <div class="card text-center">
                    <p>Days Already Signed Off This Month ({{ year_month }})</p>
                    <div class="card-body">
                        <h5 class="card-title text-center">{{ signed_off_count }}</h5>
                    </div>
                </div>
            </div>
        </div>
    </div>
<hr>"


